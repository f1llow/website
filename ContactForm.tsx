import React, { useState } from 'react';

const BOT_TOKEN = '8041409349:AAHjBVKwG0jytcEQIJAHMnOLLNQ-TZg7iIo'; // –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const CHAT_ID = '443538883';      // –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π chat_id

const ContactForm: React.FC = () => {
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    message: '',
  });

  const [status, setStatus] = useState('');

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setStatus('–û—Ç–ø—Ä–∞–≤–∫–∞...');

    const text = `
üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞:
üë§ –ò–º—è: ${formData.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.message}
    `;

    try {
      const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: CHAT_ID,
          text: text,
        }),
      });

      if (response.ok) {
        setStatus('–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        setFormData({ name: '', phone: '', message: '' });
      } else {
        setStatus('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.');
      }
    } catch (error) {
      console.error(error);
      setStatus('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="max-w-md mx-auto p-4 shadow rounded bg-white space-y-4">
      <h2 className="text-xl font-semibold">–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏</h2>

      <input
        type="text"
        name="name"
        placeholder="–í–∞—à–µ –∏–º—è"
        value={formData.name}
        onChange={handleChange}
        required
        className="w-full p-2 border rounded"
      />

      <input
        type="tel"
        name="phone"
        placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
        value={formData.phone}
        onChange={handleChange}
        required
        className="w-full p-2 border rounded"
      />

      <textarea
        name="message"
        placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ"
        value={formData.message}
        onChange={handleChange}
        required
        className="w-full p-2 border rounded h-24"
      />

      <button type="submit" className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700">
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å
      </button>

      {status && <p className="text-sm text-gray-600">{status}</p>}
    </form>
  );
};

export default ContactForm;
